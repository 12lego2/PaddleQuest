using System;

public class Player
{
    private static Player instance;
    private static readonly object lockObj = new object();

    // Singleton Instance Property
    public static Player Instance
    {
        get
        {
            lock (lockObj)
            {
                if (instance == null)
                {
                    instance = new Player();
                }
                return instance;
            }
        }
    }

    // Private fields
    private int health;
    private int damage;

    // Properties for encapsulation
    public int Health
    {
        get { return health; }
        private set { health = value; }
    }

    public int Damage
    {
        get { return damage; }
        private set { damage = value; }
    }

    // Private constructor
    private Player() { }

    public void SetClass(CharacterClass charClass)
    {
        this.Health = charClass.Health;
        this.Damage = charClass.Damage;
    }
}

public abstract class CharacterClass
{
    public abstract int Health { get; }
    public abstract int Damage { get; }
}

public class WarriorClass : CharacterClass
{
    public override int Health => 100;
    public override int Damage => 20;
}

public class MageClass : CharacterClass
{
    public override int Health => 80;
    public override int Damage => 30;
}

public class RogueClass : CharacterClass
{
    public override int Health => 90;
    public override int Damage => 25;
}

public class Program
{
    public static void Main(string[] args)
    {
        // Example setup
        CharacterClass warrior = new WarriorClass();
        Player.Instance.SetClass(warrior);

        Console.WriteLine($"Player Health: {Player.Instance.Health}");
        Console.WriteLine($"Player Damage: {Player.Instance.Damage}");
    }
}


